name: CI
on:
  push:
    branches: [ dev ]
defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - build: x86_64-linux
            os: ubuntu-latest
          - build: x86_64-macos
            os: macos-latest
          - build: x86_64-windows
            os: windows-latest
            target: x86_64-pc-windows-gnu
          - build: aarch64-linux
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            gcc_package: gcc-aarch64-linux-gnu
            gcc: aarch64-linux-gnu-gcc
            qemu: qemu-aarch64 -L /usr/aarch64-linux-gnu
            qemu_target: aarch64-linux-user
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '^1.17.0'
      - name: Install cross-compilation tools
        run: |
          set -ex
          sudo apt-get update
          sudo apt-get install -y ${{ matrix.gcc_package }}
          # Download and build qemu from source since the most recent release is
          # way faster at arm emulation than the current version github actions'
          # ubuntu image uses. Disable as much as we can to get it to build
          # quickly.
          curl https://download.qemu.org/qemu-5.0.0.tar.xz | tar xJf -
          cd qemu-5.0.0
          ./configure --target-list=${{ matrix.qemu_target }} --prefix=$HOME/qemu --disable-tools --disable-slirp --disable-fdt --disable-capstone --disable-docs
          make -j$(nproc) install

          upcase=$(echo ${{ matrix.target }} | awk '{ print toupper($0) }' | sed 's/-/_/g')
        if: matrix.target != '' && matrix.os == 'ubuntu-latest'

      - name: Analysis
        run: go vet ./...

      - name: Test
        run: go test -p 1 ./...

      - name: Build
        run: go build ./cmd/dbolt


      # ... and now perform some goop to move all the relevant artifacts into
      # something that we'll upload from this action.
      - run: mkdir dist

      # Move `dbolt` or `dbolt.exe` to dist folder
      - run: cp dbolt* dist

      - uses: actions/upload-artifact@v1
        with:
          name: dbolt-${{ matrix.build }}
          path: dist
